// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RepoLib is an autogenerated mock type for the RepoLib type
type RepoLib struct {
	mock.Mock
}

// DeleteRecordByID provides a mock function with given fields: ctx, databaseName, collectionName, id
func (_m *RepoLib) DeleteRecordByID(ctx context.Context, databaseName string, collectionName string, id string) error {
	ret := _m.Called(ctx, databaseName, collectionName, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, databaseName, collectionName, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecord provides a mock function with given fields: ctx, databaseName, collectionName, result, filter, projection
func (_m *RepoLib) GetRecord(ctx context.Context, databaseName string, collectionName string, result interface{}, filter map[string]interface{}, projection map[string]interface{}) error {
	ret := _m.Called(ctx, databaseName, collectionName, result, filter, projection)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, map[string]interface{}, map[string]interface{}) error); ok {
		r0 = rf(ctx, databaseName, collectionName, result, filter, projection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecords provides a mock function with given fields: ctx, databaseName, collectionName, results, filter, projection
func (_m *RepoLib) GetRecords(ctx context.Context, databaseName string, collectionName string, results interface{}, filter map[string]interface{}, projection map[string]interface{}) error {
	ret := _m.Called(ctx, databaseName, collectionName, results, filter, projection)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, map[string]interface{}, map[string]interface{}) error); ok {
		r0 = rf(ctx, databaseName, collectionName, results, filter, projection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertMultipleRecords provides a mock function with given fields: ctx, databaseName, collectionName, resources
func (_m *RepoLib) InsertMultipleRecords(ctx context.Context, databaseName string, collectionName string, resources []interface{}) (interface{}, error) {
	ret := _m.Called(ctx, databaseName, collectionName, resources)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []interface{}) interface{}); ok {
		r0 = rf(ctx, databaseName, collectionName, resources)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []interface{}) error); ok {
		r1 = rf(ctx, databaseName, collectionName, resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecord provides a mock function with given fields: ctx, databaseName, collectionName, filter, update
func (_m *RepoLib) UpdateRecord(ctx context.Context, databaseName string, collectionName string, filter map[string]interface{}, update map[string]interface{}) (int, int, error) {
	ret := _m.Called(ctx, databaseName, collectionName, filter, update)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}, map[string]interface{}) int); ok {
		r0 = rf(ctx, databaseName, collectionName, filter, update)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]interface{}, map[string]interface{}) int); ok {
		r1 = rf(ctx, databaseName, collectionName, filter, update)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, map[string]interface{}, map[string]interface{}) error); ok {
		r2 = rf(ctx, databaseName, collectionName, filter, update)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewRepoLib interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoLib creates a new instance of RepoLib. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoLib(t mockConstructorTestingTNewRepoLib) *RepoLib {
	mock := &RepoLib{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
